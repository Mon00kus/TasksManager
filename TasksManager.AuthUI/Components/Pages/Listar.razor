@page "/Listar"
@inject ITasksManagementRepository Repository

<PageTitle>
    Listado de Tareas
</PageTitle>

@if (authMessage == "NO autenticado.")
{
    <div class="list-item" style="font-size:20px">
        Debe estar autenticado para ver las tareas.
    </div>    
}
else
{
    <div class="row justify-content-center">
        <div class="col-6">
            <a href="add-new"
               class="btn btn-primary shadow mb-3">
                Agregar tarea
            </a>
            <div class="mb-3">
                <label for="state" class="form-label">
                    Filtrar tarea
                </label>
                <InputSelect 
                    id="state"                    
                    @bind-Value="taskManagement.State"          
                    @onchange="EventCallback.Factory.Create<ChangeEventArgs>(this, FilterTasks)"
                    class="form-control"
                >
                    <option value="0">
                        Seleccione opción
                    </option>
                    @foreach (var state in Enum.GetValues(typeof(State)))
                    {
                        @* <option value="@state">
                            @state.ToString()
                        </option> *@
                        <option value="@((int)state)">@state.ToString()</option>
                    }
                </InputSelect>
            </div>
            @if (taskList is null)
            {
                <div class="book-item">
                    Llamando listado...
                </div>
            }
            else if (taskList.Any())
            {
                @foreach (var taskItem in taskList)
                {
                    <div class="list-item">
                        <List_item @rendermode="InteractiveServer" taskItem="taskItem" />
                    </div>
                }
            }
            else
            {
                <div class="list-item">
                    No se encontraron Tareas.
                </div>
            }
        </div>
    </div>
}

@code {

    private string authMessage = "NO autenticado.";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    public TaskManagement taskManagement { get; set; } = new();

    private List<TaskManagement>? taskList;

    protected override async Task OnInitializedAsync()
    {       

        taskList = await Repository.GetAllAsync();

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} esta autenticado.";
            }
        }        
    }
        
    private async Task FilterTasks(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var stateValue) && Enum.IsDefined(typeof(State), stateValue))
        {
            taskList = await Repository.GetTasksByStateAsync((State)stateValue);
            StateHasChanged();
        }
    }
}