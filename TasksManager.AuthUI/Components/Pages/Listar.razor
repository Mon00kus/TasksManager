@page "/Listar"
@inject ITasksManagementRepository Repository

<PageTitle>
    Listado de Tareas
</PageTitle>

@if (authMessage == "NO autenticado.")
{
    <div class="list-item" style="font-size:20px">
        Debe estar autenticado para ver las tareas.
    </div>    
}
else
{
    <div class="row justify-content-center">
        <div class="col-6">
            <div class="d-flex justify-content-start mb-3">
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    Href="add-new" 
                    Class="shadow me-3"
                >   Agregar tarea 
                </MudButton>
                @if (taskList.Any())
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               Href="graff"
                               Class="shadow-none">
                        Graficar
                    </MudButton>
                }                
                @* <a href="add-new" class="btn btn-primary shadow me-3">Agregar tarea</a> 
                <a href="/Graff" class="btn btn-secondary shadow-none">Graficar</a> *@
            </div>                        
            @if (taskList is null)
            {
                <div class="book-item">
                    Llamando listado...
                </div>
            }
            else if (taskList.Any())
            {
                @foreach (var taskItem in taskList)
                {
                    <div class="list-item">
                        <List_item @rendermode="InteractiveServer" taskItem="taskItem" />
                    </div>
                }
            }
            else
            {
                <div class="list-item">
                    No se encontraron Tareas.
                </div>
            }
        </div>
    </div>
}

@code {

    private string authMessage = "NO autenticado.";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    public TaskManagement taskManagement { get; set; } = new();

    private List<TaskManagement>? taskList;

    protected override async Task OnInitializedAsync()
    {       

        taskList = await Repository.GetAllAsync();

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} esta autenticado.";
            }
        }        
    }            
}